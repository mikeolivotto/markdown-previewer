{"version":3,"sources":["App.js","DefaultMarkdown.js","index.js"],"names":["mdOptions","pedantic","gfm","sanitize","breaks","MarkdownEditor","props","state","input","handleChange","bind","event","this","setState","target","value","__html","marked","Container","style","Row","Col","xs","lg","className","id","placeholder","onChange","dangerouslySetInnerHTML","getMarkdownText","href","React","Component","ReactDOM","render","App","document","getElementById"],"mappings":"oRAQMA,EAAY,CAEhBC,UAAU,EAEVC,KAAK,EAELC,UAAU,EACVC,QAAQ,GAkFKC,E,kDA9Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MCtBe,gjCDwBjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALH,E,gDAQnB,SAAaC,GACXC,KAAKC,SAAS,CACZL,MAAOG,EAAMG,OAAOC,U,6BAIxB,WAEE,MAAO,CAAEC,OADOC,YAAQL,KAAKL,MAAMC,MAAQR,M,oBAI7C,WA8BE,OACE,eAACkB,EAAA,EAAD,CAAWC,MA7BU,CAErB,UAAa,QA2Bb,UACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,UAAU,GAAGL,MAfnB,CAClB,SAAY,SACZ,UAAa,QAaT,UACE,+CACA,0BACEM,GAAG,SACHC,YAAY,yBACZX,MAAOH,KAAKL,MAAMC,MAClBmB,SAAUf,KAAKH,aACfU,MAjCY,CACpB,UAAa,QACb,OAAU,MACV,UAAa,QA+BLK,UAAU,aAGd,eAACH,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,UAAU,GAAGL,MA9BlB,CACnB,UAAa,QA6BT,UACA,+CACE,qBAAKM,GAAG,UAAUG,wBAAyBhB,KAAKiB,kBAAmBL,UAAU,GAAGL,MAvBpE,CAClB,SAAY,SACZ,OAAU,MACV,gBAAkB,QAClB,QAAW,gBAwBP,oBAAGM,GAAG,UAAN,wBACa,mBAAGK,KAAK,2BAAR,qC,GAxEMC,IAAMC,WEdnCC,IAASC,OAAO,cAACC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.fbe6326f.chunk.js","sourcesContent":["import React from \"react\";\nimport { marked } from \"../node_modules/marked/lib/marked.esm.js\";\nimport defaultMarkdown from \"./DefaultMarkdown\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport './index.css'\n\nconst mdOptions = {\n  // whether to conform to original MD implementation\n  pedantic: false,\n  // Github Flavoured Markdown\n  gfm: true,\n  // tables extension\n  sanitize: true,\n  breaks: true,\n};\n\nclass MarkdownEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: defaultMarkdown,\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      input: event.target.value,\n    });\n  }\n\n  getMarkdownText() {\n    var rawMarkup = marked((this.state.input), mdOptions);\n    return { __html: rawMarkup };\n  }\n\n  render() {\n    \n    const containerStyle = {\n      // \"border\": \"1px solid black\",\n      \"marginTop\": \"20px\"\n    }\n\n    const textAreaStyle = {\n      \"minHeight\": \"350px\",\n      \"height\": \"89%\",\n      \"maxHeight\": \"90vh\",\n\n    }\n\n    const previewStyle = {\n      \"maxHeight\": \"90vh\"\n    }\n\n    const editorStyle = {\n      \"overflow\": \"scroll\",\n      \"maxHeight\": \"90vh\"\n    }\n\n    const parsedStyle = {\n      \"overflow\": \"scroll\",\n      \"height\": \"89%\",\n      \"backgroundColor\":\"white\",\n      \"padding\": \"20px\"\n  }\n\n    return (\n      <Container style={containerStyle}>\n        <Row>\n          <Col xs={12} lg={6} className=\"\" style={editorStyle}>\n            <h2>Markup editor</h2>\n            <textarea\n              id=\"editor\"\n              placeholder=\"Enter your markup here\"\n              value={this.state.input}\n              onChange={this.handleChange}\n              style={textAreaStyle}\n              className=\"w-100\"\n            ></textarea>\n          </Col>\n          <Col xs={12} lg={6} className=\"\" style={previewStyle}>\n          <h2>Parsed result</h2>\n            <div id=\"preview\" dangerouslySetInnerHTML={this.getMarkdownText()} className=\"\" style={parsedStyle} />\n          </Col>\n        </Row>\n        \n        \n          <p id=\"credits\">\n            Created by <a href=\"https://mikeolivotto.com\">Mike Olivotto</a>\n          </p>\n      </Container>\n    );\n  }\n}\n\nexport default MarkdownEditor;\n","const defaultMarkdown = `# H1\n## H2\n### H3\n\n\\`<p>display code</p>\\`\n\nWrite multi-line code by opening and closing with 3 backticks:\n\\`\\`\\`\nfunction anotherExample(firstLine, lastLine) {\n    if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n        return multiLineCode;\n    }\n}\n\\`\\`\\`\n    \nStyle your text in **bold**, _italic_, or even ~~cross stuff out~~.\n_**Go**_ _~~nuts~~_ and combine them ~~**as you please**~~. \n\n\nYou can link to [your favourite website](https://www.yvanehtnioj.com)\n\n> Make it clear you're quoting someone by using block quote syntax\n\nTables - add as many rows/columns as you need:\n\nColumn 1 | Column 2 | Column 3\n------------ | ------------- | ------------- \nCol1 Row1 | Col2 Row1 | Col3 Row1\nCol1 Row1 | Col2 Row2 | Col3 Row 2\n\nCreate lists:\n- Regular list item\n- Indented to create a sub-list\n    - Indented again for deeper lists\n\n* You can use dashes or asterisks - whatever you prefer.\n\n1. Numbered lists are also possible.\n1. And very simple\n    \nAnd if you want to include embedded images:\n\n![React Logo w/ Text](./logo192.png)\n`;\n\nexport default defaultMarkdown;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}